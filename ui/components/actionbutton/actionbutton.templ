package actionbutton

import (
	"github.com/ch00k/oar/ui/components/modal"
	"github.com/ch00k/oar/ui/components/icon"
)

// ActionButtonConfig holds configuration for action buttons
type ActionButtonConfig struct {
	ID         string
	ModalID    string
	Icon       templ.Component
	Tooltip    string
	ColorClass string
	HoverClass string
	Condition  bool
	Onclick    string
	Disabled   bool
	Class      string
	Attributes templ.Attributes
	ButtonType string // "button" (default), "submit", "reset"
	// Spinner configuration
	ShowSpinner   bool
	SpinnerID     string
	IconID        string
	// Tooltip configuration
	TooltipPosition string // "center" (default), "left" (right-aligned to button), "right" (left-aligned to button)
}

templ ActionButton(config ActionButtonConfig) {
	if config.Condition {
		<div class="relative group">
			if config.ModalID != "" {
				@modal.Trigger(modal.TriggerProps{For: config.ModalID}) {
					<button 
						if config.ID != "" {
							id={ config.ID }
						}
						if config.ButtonType != "" {
						type={ config.ButtonType }
					} else {
						type="button"
					}
						class={ 
							"flex items-center justify-center p-2 rounded-md transition-colors relative", 
							config.ColorClass, 
							config.HoverClass,
							config.Class,
							templ.KV("opacity-50 cursor-not-allowed", config.Disabled),
						}
						{ config.Attributes... }
						if config.Disabled {
							disabled="true"
						}
					>
						if config.ShowSpinner {
							<span 
								if config.SpinnerID != "" {
									id={ config.SpinnerID }
								}
								class="hidden"
							>
								@icon.LoaderCircle(icon.Props{
									Class: "animate-spin !w-6 !h-6 !min-w-[24px] !min-h-[24px] !max-w-[24px] !max-h-[24px]",
								})
							</span>
						}
						<span 
							if config.IconID != "" {
								id={ config.IconID }
							}
							class="block"
						>
							@config.Icon
						</span>
					</button>
				}
			} else {
				<button 
					if config.ID != "" {
						id={ config.ID }
					}
					if config.ButtonType != "" {
						type={ config.ButtonType }
					} else {
						type="button"
					}
					class={ 
						"flex items-center justify-center p-2 rounded-md transition-colors relative", 
						config.ColorClass, 
						config.HoverClass,
						config.Class,
						templ.KV("opacity-50 cursor-not-allowed", config.Disabled),
					}
					{ config.Attributes... }
					if config.Disabled {
						disabled="true"
					}
				>
					if config.ShowSpinner {
						<span 
							if config.SpinnerID != "" {
								id={ config.SpinnerID }
							}
							class="hidden"
						>
							@icon.LoaderCircle(icon.Props{
								Class: "animate-spin !w-6 !h-6 !min-w-[24px] !min-h-[24px] !max-w-[24px] !max-h-[24px]",
							})
						</span>
					}
					<span 
						if config.IconID != "" {
							id={ config.IconID }
						}
						class="block"
					>
						@config.Icon
					</span>
				</button>
			}
			<div class={ 
				"absolute bottom-full mb-2 px-2 py-1 text-xs bg-gray-200 text-gray-900 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50",
				templ.KV("right-0", config.TooltipPosition == "left"),
				templ.KV("left-0", config.TooltipPosition == "right"),
				templ.KV("left-1/2 transform -translate-x-1/2", config.TooltipPosition == "" || config.TooltipPosition == "center"),
			}>
				{ config.Tooltip }
			</div>
		</div>
	}
}