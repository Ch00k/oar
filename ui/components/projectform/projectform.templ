package projectform

import (
	"github.com/ch00k/oar/ui/components/form"
	"github.com/ch00k/oar/ui/components/input"
	"github.com/ch00k/oar/ui/components/selectbox"
	"github.com/ch00k/oar/ui/components/textarea"
	"github.com/ch00k/oar/ui/components/tagsinput"
	"github.com/ch00k/oar/ui/components/actionbutton"
	"github.com/ch00k/oar/ui/components/icon"
	"github.com/ch00k/oar/services"
	"strings"
	"fmt"
)

type ProjectFormProps struct {
	// Mode determines the form behavior ("create" or "edit")
	Mode string
	// Project data (for edit mode, can be nil for create mode)
	Project *services.Project
	// Form configuration
	FormID     string
	FormAction string
	FormTarget string
	FormSwap   string
	// Field ID prefixes to ensure uniqueness
	IDPrefix string
	// Additional form attributes
	FormAttributes templ.Attributes
}

templ ProjectForm(props ProjectFormProps) {
	<form
		if props.FormID != "" {
			id={ props.FormID }
		}
		class="space-y-4"
		if props.FormAction != "" {
			hx-post={ props.FormAction }
		}
		if props.FormTarget != "" {
			hx-target={ props.FormTarget }
		}
		if props.FormSwap != "" {
			hx-swap={ props.FormSwap }
		}
		{ props.FormAttributes... }
	>
		if props.Mode == "edit" && props.Project != nil {
			<!-- Hidden fields for edit mode -->
			<input type="hidden" name="working_dir" value={ props.Project.WorkingDir }/>
			<input type="hidden" name="status" value={ props.Project.Status.String() }/>
			if props.Project.LastCommit != nil {
				<input type="hidden" name="last_commit" value={ *props.Project.LastCommit }/>
			}
			<input type="hidden" name="created_at" value={ props.Project.CreatedAt.Format("2006-01-02T15:04:05Z07:00") }/>
			<input type="hidden" name="updated_at" value={ props.Project.UpdatedAt.Format("2006-01-02T15:04:05Z07:00") }/>
		}

		<!-- Project Name -->
		@form.Item() {
			@form.Label(form.LabelProps{For: fmt.Sprintf("%s-name", props.IDPrefix)}) {
				Project Name
			}
			@input.Input(input.Props{
				ID:          fmt.Sprintf("%s-name", props.IDPrefix),
				Name:        "name",
				Type:        input.TypeText,
				Placeholder: "Enter project name",
				Value:       getProjectName(props.Project),
				Required:    true,
				Class:       "bg-gray-50 placeholder:text-gray-400",
			})
		}

		<!-- Git URL -->
		@form.Item() {
			@form.Label(form.LabelProps{For: fmt.Sprintf("%s-git-url", props.IDPrefix)}) {
				Git URL
			}
			<div class="flex gap-2">
				@input.Input(input.Props{
					ID:          fmt.Sprintf("%s-git-url", props.IDPrefix),
					Name:        "git_url",
					Type:        input.TypeText,
					Placeholder: "https://github.com/user/repo.git or git@github.com:user/repo.git",
					Value:       getProjectGitURL(props.Project),
					Required:    true,
					Disabled:    props.Mode == "edit",
					Class:       getGitURLFieldClass(props.Mode),
					Attributes:  templ.Attributes{"onblur": "checkGitAuthFieldsVisibility()"},
				})
				if props.Mode == "create" {
					@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
						ID:              "discover-button",
						Icon:            icon.Radar(icon.Props{Class: "!w-6 !h-6 !min-w-[24px] !min-h-[24px] !max-w-[24px] !max-h-[24px]"}),
						Tooltip:         "Auto-discover compose files",
						ColorClass:      "text-green-600",
						HoverClass:      "hover:text-green-800 hover:bg-green-100",
						Condition:       true,
						Disabled:        true,
						Class:           "shrink-0",
						Attributes:      templ.Attributes{"onclick": "validateAndDiscover()"},
						ButtonType:      "button",
						ShowSpinner:     true,
						SpinnerID:       "discover-indicator",
						IconID:          "discover-icon",
						TooltipPosition: "left",
					})
				}
			</div>
		}

		<!-- Git Authentication -->
		@form.Item() {
			@form.Label(form.LabelProps{For: fmt.Sprintf("%s-auth-type", props.IDPrefix)}) {
				Authentication Type
			}
			<div class="flex gap-2">
				@selectbox.SelectBox(selectbox.Props{
					ID: fmt.Sprintf("%s-auth-type-select", props.IDPrefix),
				}) {
					@selectbox.Trigger(selectbox.TriggerProps{
						ID:    fmt.Sprintf("%s-auth-type", props.IDPrefix),
						Name:  "auth_type",
						Class: "bg-gray-50 flex-1",
						Attributes: templ.Attributes{"onchange": fmt.Sprintf("toggleAuthFields('%s')", props.IDPrefix)},
					}) {
						@selectbox.Value(selectbox.ValueProps{
							Placeholder: "None",
						})
					}
					@selectbox.Content(selectbox.ContentProps{
						NoSearch: true,
					}) {
						@selectbox.Item(selectbox.ItemProps{
							Value:    "none",
							Selected: getAuthType(props.Project) == "none" || getAuthType(props.Project) == "",
						}) {
							None
						}
						@selectbox.Item(selectbox.ItemProps{
							Value:    "http",
							Selected: getAuthType(props.Project) == "http",
						}) {
							HTTP (username/password)
						}
						@selectbox.Item(selectbox.ItemProps{
							Value:    "ssh",
							Selected: getAuthType(props.Project) == "ssh",
						}) {
							SSH (private key)
						}
					}
				}
				if props.Mode == "create" {
					@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
						ID:              fmt.Sprintf("%s-test-git-auth-button", props.IDPrefix),
						Icon:            icon.FlaskConical(icon.Props{Class: "!w-6 !h-6 !min-w-[24px] !min-h-[24px] !max-w-[24px] !max-h-[24px]"}),
						Tooltip:         "Test git authentication",
						ColorClass:      "text-blue-600",
						HoverClass:      "hover:text-blue-800 hover:bg-blue-100",
						Condition:       true,
						Disabled:        true,
						Class:           "shrink-0",
						Attributes:      templ.Attributes{"onclick": fmt.Sprintf("validateAndTestGitAuth('%s')", props.IDPrefix)},
						ButtonType:      "button",
						ShowSpinner:     true,
						SpinnerID:       fmt.Sprintf("%s-test-git-auth-indicator", props.IDPrefix),
						IconID:          fmt.Sprintf("%s-test-git-auth-icon", props.IDPrefix),
						TooltipPosition: "left",
					})
				}
			</div>
		}

		<div id={ fmt.Sprintf("%s-auth-fields-section", props.IDPrefix) }>
			<!-- HTTP Authentication Fields -->
			<div id={ fmt.Sprintf("%s-http-auth-fields", props.IDPrefix) } class="space-y-4" style={ getAuthFieldsDisplay(props.Project, "http") }>
				@form.Item() {
					@form.Label(form.LabelProps{For: fmt.Sprintf("%s-username", props.IDPrefix)}) {
						Username
					}
					@input.Input(input.Props{
						ID:          fmt.Sprintf("%s-username", props.IDPrefix),
						Name:        "username",
						Type:        input.TypeText,
						Placeholder: "Enter username",
						Value:       getHTTPUsername(props.Project),
						Class:       "bg-gray-50 placeholder:text-gray-400",
					})
				}
				@form.Item() {
					@form.Label(form.LabelProps{For: fmt.Sprintf("%s-password", props.IDPrefix)}) {
						Password
					}
					@input.Input(input.Props{
						ID:          fmt.Sprintf("%s-password", props.IDPrefix),
						Name:        "password",
						Type:        input.TypePassword,
						Placeholder: "Enter password",
						Value:       getHTTPPassword(props.Project),
						Class:       "bg-gray-50 placeholder:text-gray-400",
					})
				}
			</div>

			<!-- SSH Authentication Fields -->
			<div id={ fmt.Sprintf("%s-ssh-auth-fields", props.IDPrefix) } class="space-y-4" style={ getAuthFieldsDisplay(props.Project, "ssh") }>
				@form.Item() {
					@form.Label(form.LabelProps{For: fmt.Sprintf("%s-ssh-user", props.IDPrefix)}) {
						SSH User
					}
					@input.Input(input.Props{
						ID:          fmt.Sprintf("%s-ssh-user", props.IDPrefix),
						Name:        "ssh_user",
						Type:        input.TypeText,
						Placeholder: "Enter SSH user (e.g., git)",
						Value:       getSSHUser(props.Project),
						Class:       "bg-gray-50 placeholder:text-gray-400",
					})
				}
				@form.Item() {
					@form.Label(form.LabelProps{For: fmt.Sprintf("%s-ssh-key", props.IDPrefix)}) {
						SSH Private Key
					}
					@textarea.Textarea(textarea.Props{
						ID:          fmt.Sprintf("%s-ssh-key", props.IDPrefix),
						Name:        "ssh_private_key",
						Placeholder: "-----BEGIN OPENSSH PRIVATE KEY-----\n...\n-----END OPENSSH PRIVATE KEY-----",
						Rows:        3,
						Value:       getSSHPrivateKey(props.Project),
						Class:       "bg-gray-50 placeholder:text-gray-400",
					})
				}
			</div>
		</div>

		<!-- Compose Files Section -->
		<div id={ fmt.Sprintf("%s-compose-files-section", props.IDPrefix) } class="space-y-4">
			@form.Item() {
				@form.Label(form.LabelProps{For: fmt.Sprintf("%s-compose-files", props.IDPrefix)}) {
					Compose Files
				}
				@tagsinput.TagsInput(tagsinput.Props{
					ID:          fmt.Sprintf("%s-compose-files", props.IDPrefix),
					Name:        "compose_files",
					Placeholder: "Add compose file...",
					Value:       getProjectComposeFiles(props.Project),
					Class:       "bg-gray-50 [&_input]:placeholder:text-gray-400",
				})
			}
		</div>

		<!-- Variables -->
		@form.Item() {
			@form.Label(form.LabelProps{For: fmt.Sprintf("%s-variables", props.IDPrefix)}) {
				Variables
			}
			@textarea.Textarea(textarea.Props{
				ID:          fmt.Sprintf("%s-variables", props.IDPrefix),
				Name:        "variables_raw",
				Placeholder: "Paste your .env file content here...\nKEY1=value1\nKEY2=value2\n# Comments will be ignored",
				Rows:        4,
				Class:       "bg-gray-50 placeholder:text-gray-400",
				Value:       getProjectVariables(props.Project),
				Attributes:  getVariablesAttributes(props.Mode, props.IDPrefix, props.Project),
			})
		}
	</form>
}

// Helper functions

func getProjectName(project *services.Project) string {
	if project == nil {
		return ""
	}
	return project.Name
}

func getProjectGitURL(project *services.Project) string {
	if project == nil {
		return ""
	}
	return project.GitURL
}

func getProjectComposeFiles(project *services.Project) []string {
	if project == nil {
		return []string{}
	}
	return project.ComposeFiles
}

func getProjectVariables(project *services.Project) string {
	if project == nil {
		return ""
	}
	return strings.Join(project.Variables, "\n")
}

func getAuthType(project *services.Project) string {
	if project == nil || project.GitAuth == nil {
		return "none"
	}
	if project.GitAuth.HTTPAuth != nil {
		return "http"
	}
	if project.GitAuth.SSHAuth != nil {
		return "ssh"
	}
	return "none"
}

func getHTTPUsername(project *services.Project) string {
	if project == nil || project.GitAuth == nil || project.GitAuth.HTTPAuth == nil {
		return ""
	}
	return project.GitAuth.HTTPAuth.Username
}

func getHTTPPassword(project *services.Project) string {
	if project == nil || project.GitAuth == nil || project.GitAuth.HTTPAuth == nil {
		return ""
	}
	return project.GitAuth.HTTPAuth.Password
}

func getSSHUser(project *services.Project) string {
	if project == nil || project.GitAuth == nil || project.GitAuth.SSHAuth == nil {
		return ""
	}
	return project.GitAuth.SSHAuth.User
}

func getSSHPrivateKey(project *services.Project) string {
	if project == nil || project.GitAuth == nil || project.GitAuth.SSHAuth == nil {
		return ""
	}
	return project.GitAuth.SSHAuth.PrivateKey
}

func getAuthFieldsDisplay(project *services.Project, authType string) string {
	currentAuthType := getAuthType(project)
	if currentAuthType == authType {
		return "display: block;"
	}
	return "display: none;"
}

func getVariablesAttributes(mode, idPrefix string, project *services.Project) templ.Attributes {
	if mode == "create" {
		return templ.Attributes{"oninput": "parseVariables()"}
	}
	if project != nil {
		return templ.Attributes{"oninput": fmt.Sprintf("parseVariablesEdit('%s')", project.ID.String())}
	}
	return templ.Attributes{"oninput": fmt.Sprintf("parseVariablesEdit('%s')", idPrefix)}
}

func getGitURLFieldClass(mode string) string {
	if mode == "edit" {
		return "bg-gray-100 flex-1 placeholder:text-gray-400 text-gray-600 cursor-not-allowed"
	}
	return "bg-gray-50 flex-1 placeholder:text-gray-400"
}
