package pages

import (
	"github.com/ch00k/oar/ui/components/modal"
	"github.com/ch00k/oar/ui/components/input"
	"github.com/ch00k/oar/ui/components/tagsinput"
	"github.com/ch00k/oar/ui/components/toast"
)

templ Base(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link rel="stylesheet" href="/assets/css/output.css"/>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
		</head>
		<style>
			[data-modal-backdrop] {
				background-color: rgba(0, 0, 0, 0.6) !important;
			}
		</style>
		<body class="bg-gray-200">
			<div class="flex h-screen">
				<!-- Main Content -->
				<main class="flex-1 overflow-y-auto p-6">
					<div class="max-w-screen-2xl mx-auto">
						{ children... }
					</div>
				</main>
			</div>

			<!-- Toast Container -->
			<div id="toast-container"></div>

			@modal.Script()
			@input.Script()
			@tagsinput.Script()
			@toast.Script()
			<!-- Streaming system modules -->
			<script src="/assets/js/streaming/ui-utils.js"></script>
			<script src="/assets/js/streaming/state-manager.js"></script>
			<script src="/assets/js/streaming/modal-manager.js"></script>
			<script src="/assets/js/streaming/core.js"></script>
			<script src="/assets/js/streaming/operations.js"></script>
			<script src="/assets/js/streaming.js"></script>
			<script src="/assets/js/discovery.js"></script>
			<script>
				// Handle successful project update - close modal
				document.body.addEventListener('htmx:afterRequest', function(e) {
					// Check if this was a successful project edit request
					const hxTrigger = e.detail.xhr.getResponseHeader('HX-Trigger');

					if (e.detail.xhr.status === 200) {
						if (hxTrigger && hxTrigger.startsWith('project-updated-')) {
							const projectId = hxTrigger.replace('project-updated-', '');
							const modal = document.querySelector(`#edit-project-modal-${projectId}`);
							if (modal) {
								// Find and click the close button to properly close the modal
								const closeButton = modal.querySelector('[data-modal-close]');
								if (closeButton) {
									closeButton.click();
								} else {
									// Fallback: manually hide the modal
									modal.style.display = 'none';
									modal.classList.add('hidden');
									modal.setAttribute('data-open', 'false');
								}
							}
						} else if (hxTrigger === 'project-created') {
							// Close the add project modal
							const modal = document.querySelector('#add-project-modal');
							if (modal) {
								const closeButton = modal.querySelector('[data-modal-close]');
								if (closeButton) {
									closeButton.click();
								}
							}
						} else if (hxTrigger === 'project-deleted') {
							// Close any open delete confirmation modals
							const modals = document.querySelectorAll('[id^="delete-project-modal-"]');
							modals.forEach(modal => {
								const closeButton = modal.querySelector('[data-modal-close]');
								if (closeButton) {
									closeButton.click();
								}
							});
						} else if (hxTrigger === 'project-started') {
							// Close any open start confirmation modals
							const modals = document.querySelectorAll('[id^="start-project-modal-"]');
							modals.forEach(modal => {
								const closeButton = modal.querySelector('[data-modal-close]');
								if (closeButton) {
									closeButton.click();
								}
							});
						} else if (hxTrigger === 'project-stopped') {
							// Close any open stop confirmation modals
							const modals = document.querySelectorAll('[id^="stop-project-modal-"]');
							modals.forEach(modal => {
								const closeButton = modal.querySelector('[data-modal-close]');
								if (closeButton) {
									closeButton.click();
								}
							});
						}
					}
				});

				// Re-initialize templUI components after HTMX swaps
				document.body.addEventListener("htmx:afterSwap", (e) => {
					if (window.templUI) {
						Object.values(window.templUI).forEach(comp => {
							comp.init?.(e.detail.elt);
						});
					}
				});

                // Re-initialize components after out-of-band swaps
                document.body.addEventListener("htmx:oobAfterSwap", (e) => {
                    if (window.templUI) {
                        Object.values(window.templUI).forEach(comp => {
                            comp.init?.(e.detail.target);
                        });
                    }
                });

                // Cleanup before swap (for components with event listeners)
                document.body.addEventListener("htmx:beforeSwap", (e) => {
                    if (window.templUI) {
                        Object.values(window.templUI).forEach(comp => {
                            comp.cleanup?.(e.detail.target);
                        });
                    }
                });
            </script>
		</body>
	</html>
}
