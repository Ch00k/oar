// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/ch00k/oar/ui/components/input"
	"github.com/ch00k/oar/ui/components/modal"
	"github.com/ch00k/oar/ui/components/popover"
	"github.com/ch00k/oar/ui/components/selectbox"
	"github.com/ch00k/oar/ui/components/tagsinput"
	"github.com/ch00k/oar/ui/components/toast"
)

func Base(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/pages/base.templ`, Line: 18, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><link rel=\"stylesheet\" href=\"/assets/css/output.css\"><script src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js\" integrity=\"sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm\" crossorigin=\"anonymous\"></script></head><style>\n\t\t\t[data-modal-backdrop] {\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0.6) !important;\n\t\t\t}\n\t\t</style><body class=\"bg-gray-200\"><div class=\"flex h-screen\"><!-- Main Content --><main class=\"flex-1 overflow-y-auto p-6\"><div class=\"max-w-screen-2xl mx-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div></main></div><!-- Toast Container --><div id=\"toast-container\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = modal.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = input.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = tagsinput.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = popover.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = selectbox.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = toast.Script().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<!-- Streaming system modules --><script src=\"/assets/js/streaming/ui-utils.js\"></script><script src=\"/assets/js/streaming/state-manager.js\"></script><script src=\"/assets/js/streaming/modal-manager.js\"></script><script src=\"/assets/js/streaming/core.js\"></script><script src=\"/assets/js/streaming/operations.js\"></script><script src=\"/assets/js/streaming.js\"></script><script src=\"/assets/js/discovery.js\"></script><script>\n\t\t\t\t// Handle successful project update - close modal\n\t\t\t\tdocument.body.addEventListener('htmx:afterRequest', function(e) {\n\t\t\t\t\t// Check if this was a successful project edit request\n\t\t\t\t\tconst hxTrigger = e.detail.xhr.getResponseHeader('HX-Trigger');\n\n\t\t\t\t\tif (e.detail.xhr.status === 200) {\n\t\t\t\t\t\tif (hxTrigger && hxTrigger.startsWith('project-updated-')) {\n\t\t\t\t\t\t\tconst projectId = hxTrigger.replace('project-updated-', '');\n\t\t\t\t\t\t\tconst modal = document.querySelector(`#edit-project-modal-${projectId}`);\n\t\t\t\t\t\t\tif (modal) {\n\t\t\t\t\t\t\t\t// Find and click the close button to properly close the modal\n\t\t\t\t\t\t\t\tconst closeButton = modal.querySelector('[data-modal-close]');\n\t\t\t\t\t\t\t\tif (closeButton) {\n\t\t\t\t\t\t\t\t\tcloseButton.click();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Fallback: manually hide the modal\n\t\t\t\t\t\t\t\t\tmodal.style.display = 'none';\n\t\t\t\t\t\t\t\t\tmodal.classList.add('hidden');\n\t\t\t\t\t\t\t\t\tmodal.setAttribute('data-open', 'false');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hxTrigger === 'project-created') {\n\t\t\t\t\t\t\t// Close the add project modal\n\t\t\t\t\t\t\tconst modal = document.querySelector('#add-project-modal');\n\t\t\t\t\t\t\tif (modal) {\n\t\t\t\t\t\t\t\tconst closeButton = modal.querySelector('[data-modal-close]');\n\t\t\t\t\t\t\t\tif (closeButton) {\n\t\t\t\t\t\t\t\t\tcloseButton.click();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hxTrigger === 'project-deleted') {\n\t\t\t\t\t\t\t// Close any open delete confirmation modals\n\t\t\t\t\t\t\tconst modals = document.querySelectorAll('[id^=\"delete-project-modal-\"]');\n\t\t\t\t\t\t\tmodals.forEach(modal => {\n\t\t\t\t\t\t\t\tconst closeButton = modal.querySelector('[data-modal-close]');\n\t\t\t\t\t\t\t\tif (closeButton) {\n\t\t\t\t\t\t\t\t\tcloseButton.click();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (hxTrigger === 'project-started') {\n\t\t\t\t\t\t\t// Close any open start confirmation modals\n\t\t\t\t\t\t\tconst modals = document.querySelectorAll('[id^=\"start-project-modal-\"]');\n\t\t\t\t\t\t\tmodals.forEach(modal => {\n\t\t\t\t\t\t\t\tconst closeButton = modal.querySelector('[data-modal-close]');\n\t\t\t\t\t\t\t\tif (closeButton) {\n\t\t\t\t\t\t\t\t\tcloseButton.click();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (hxTrigger === 'project-stopped') {\n\t\t\t\t\t\t\t// Close any open stop confirmation modals\n\t\t\t\t\t\t\tconst modals = document.querySelectorAll('[id^=\"stop-project-modal-\"]');\n\t\t\t\t\t\t\tmodals.forEach(modal => {\n\t\t\t\t\t\t\t\tconst closeButton = modal.querySelector('[data-modal-close]');\n\t\t\t\t\t\t\t\tif (closeButton) {\n\t\t\t\t\t\t\t\t\tcloseButton.click();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Re-initialize templUI components after HTMX swaps\n\t\t\t\tdocument.body.addEventListener(\"htmx:afterSwap\", (e) => {\n\t\t\t\t\tif (window.templUI) {\n\t\t\t\t\t\tObject.values(window.templUI).forEach(comp => {\n\t\t\t\t\t\t\tcomp.init?.(e.detail.elt);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n                // Re-initialize components after out-of-band swaps\n                document.body.addEventListener(\"htmx:oobAfterSwap\", (e) => {\n                    if (window.templUI) {\n                        Object.values(window.templUI).forEach(comp => {\n                            comp.init?.(e.detail.target);\n                        });\n                    }\n                });\n\n                // Cleanup before swap (for components with event listeners)\n                document.body.addEventListener(\"htmx:beforeSwap\", (e) => {\n                    if (window.templUI) {\n                        Object.values(window.templUI).forEach(comp => {\n                            comp.cleanup?.(e.detail.target);\n                        });\n                    }\n                });\n\n\t\t\t\t// Handle authentication type selection\n\t\t\t\tfunction handleAuthTypeChange(value) {\n\t\t\t\t\tconst httpFields = document.getElementById('http-auth-fields');\n\t\t\t\t\tconst sshFields = document.getElementById('ssh-auth-fields');\n\n\t\t\t\t\tif (!httpFields || !sshFields) return;\n\n\t\t\t\t\t// Hide all auth fields by default\n\t\t\t\t\thttpFields.style.display = 'none';\n\t\t\t\t\tsshFields.style.display = 'none';\n\n\t\t\t\t\t// Show appropriate fields based on selection\n\t\t\t\t\tif (value === 'http') {\n\t\t\t\t\t\thttpFields.style.display = 'block';\n\t\t\t\t\t} else if (value === 'ssh') {\n\t\t\t\t\t\tsshFields.style.display = 'block';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\t// Initialize auth type handler\n\t\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\t// Listen for selectbox changes using the TemplUI change event\n\t\t\t\t\tdocument.addEventListener('change', function(e) {\n\t\t\t\t\t\tif (e.target && e.target.name === 'auth_type') {\n\t\t\t\t\t\t\tconsole.log('Auth type changed to:', e.target.value);\n\t\t\t\t\t\t\thandleAuthTypeChange(e.target.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Set up initial state (default to 'none')\n\t\t\t\t\thandleAuthTypeChange('none');\n\t\t\t\t});\n            </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
