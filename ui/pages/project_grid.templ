package pages

import (
	"github.com/ch00k/oar/ui/components/card"
	"github.com/ch00k/oar/ui/components/icon"
	"github.com/ch00k/oar/ui/components/modal"
	"github.com/ch00k/oar/ui/components/form"
	"github.com/ch00k/oar/ui/components/button"
	"github.com/ch00k/oar/ui/components/checkbox"
	"github.com/ch00k/oar/ui/components/toast"
	"github.com/ch00k/oar/ui/components/code"
	"github.com/ch00k/oar/ui/components/actionbutton"
	"github.com/ch00k/oar/ui/components/projectform"
	"github.com/ch00k/oar/services"
	"fmt"
)

// Configuration structures

type ModalConfig struct {
	ID     string
	Title  string
	Size   string
	Body   templ.Component
	Footer templ.Component
}

type CodeOutputConfig struct {
	ProjectID   string
	OutputType  string
	Height      string
	InitialText string
}

type ToastConfig struct {
	Title       string
	Description string
	Variant     toast.Variant
}

templ ProjectsGrid(projects []*services.Project) {
	if len(projects) == 0 {
		<div class="text-center py-12">
			<div class="text-gray-500 text-lg mb-2">No projects found</div>
			<div class="text-gray-400 text-sm">Add your first project to get started</div>
		</div>
	} else {
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
			for _, project := range projects {
				@ProjectCard(project)
			}
		</div>
		<div class="mt-6 text-sm text-muted-foreground text-center">
			{ fmt.Sprintf("%d projects", len(projects)) }
		</div>
		<!-- Project modals -->
		for _, project := range projects {
			@projectModals(project)
		}
	}
}

templ projectModals(project *services.Project) {
	@editProjectModal(project)
	@deleteProjectModal(project)
	@deployProjectModal(project)
	@stopProjectModal(project)
	@logsModal(project)
	@configModal(project)
}

templ ProjectCard(project *services.Project) {
	@card.Card(card.Props{ID: fmt.Sprintf("project-card-%s", project.ID.String()), Class: "bg-gray-100 shadow-md hover:shadow-lg transition-shadow duration-200"}) {
		@card.Header(card.HeaderProps{Class: "bg-gray-200 border-b border-gray-200 pb-4 rounded-t-lg"}) {
			<div class="flex items-center justify-between">
				@card.Title(card.TitleProps{Class: "text-xl font-bold text-gray-900"}) {
					{ project.Name }
				}
				<a href={ templ.URL(project.GitURL) } target="_blank" rel="noopener noreferrer" class="text-gray-600 hover:text-gray-800 transition-colors">
					@icon.Link()
				</a>
			</div>
		}
		@card.Content(card.ContentProps{Class: "pt-4 bg-gray-100"}) {
			<div class="space-y-3">
				<div class="flex items-center justify-between">
					<span class="text-sm font-medium text-muted-foreground">Status</span>
					@statusBadge(project.Status)
				</div>
				<div class="flex items-center justify-between">
					<span class="text-sm font-medium text-muted-foreground">Last Commit</span>
					@lastCommitBadge(project.LastCommit)
				</div>
			</div>
		}
		@card.Footer(card.FooterProps{Class: "justify-end"}) {
			<div class="flex space-x-2">
				@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
					ModalID:    fmt.Sprintf("deploy-project-modal-%s", project.ID.String()),
					Icon:       icon.Rocket(),
					Tooltip:    "Deploy Project",
					ColorClass: "text-blue-600",
					HoverClass: "hover:text-blue-800 hover:bg-blue-100",
					Condition:  true,
				})
				@ActionButtonWithVisibility(actionbutton.ActionButtonConfig{
					ModalID:    fmt.Sprintf("stop-project-modal-%s", project.ID.String()),
					Icon:       icon.CircleStop(),
					Tooltip:    "Stop Project",
					ColorClass: "text-red-600",
					HoverClass: "hover:text-red-800 hover:bg-red-100",
					Condition:  true, // Always render, control visibility with CSS
				}, project.Status == services.ProjectStatusRunning)
				@EditProjectButton(project)
				@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
					ModalID:    "",
					Icon:       icon.ListChecks(),
					Tooltip:    "View Deployments (coming soon)",
					ColorClass: "text-gray-400 cursor-not-allowed",
					HoverClass: "",
					Condition:  true,
					Disabled:   true,
				})
				@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
					ModalID:    fmt.Sprintf("logs-modal-%s", project.ID.String()),
					Icon:       icon.ScrollText(),
					Tooltip:    "View Logs",
					ColorClass: "text-gray-600",
					HoverClass: "hover:text-gray-800 hover:bg-gray-200",
					Condition:  true,
				})
				@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
					ModalID:    fmt.Sprintf("config-modal-%s", project.ID.String()),
					Icon:       icon.Settings(),
					Tooltip:    "View Config",
					ColorClass: "text-gray-600",
					HoverClass: "hover:text-gray-800 hover:bg-gray-200",
					Condition:  true,
				})
				@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
					ModalID:    fmt.Sprintf("delete-project-modal-%s", project.ID.String()),
					Icon:       icon.Trash2(),
					Tooltip:    "Delete Project",
					ColorClass: "text-red-600",
					HoverClass: "hover:text-red-800 hover:bg-red-100",
					Condition:  true,
				})
			</div>
		}
	}
}


templ ActionButtonWithVisibility(config actionbutton.ActionButtonConfig, visible bool) {
	if config.Condition {
		<div class={ templ.KV("hidden", !visible) }>
			@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
				ID:         config.ID,
				ModalID:    config.ModalID,
				Icon:       config.Icon,
				Tooltip:    config.Tooltip,
				ColorClass: config.ColorClass,
				HoverClass: config.HoverClass,
				Condition:  true,
				Onclick:    config.Onclick,
				Disabled:   config.Disabled,
				Class:      config.Class,
			})
		</div>
	}
}

templ EditProjectButton(project *services.Project) {
	if project.Status == services.ProjectStatusRunning {
		@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
			ModalID:    "", // No modal for disabled state
			Icon:       icon.SquarePen(),
			Tooltip:    "Cannot edit running project - stop it first",
			ColorClass: "text-gray-400 cursor-not-allowed",
			HoverClass: "", // No hover effects for disabled state
			Condition:  true,
			Disabled:   true,
		})
	} else {
		@actionbutton.ActionButton(actionbutton.ActionButtonConfig{
			ModalID:    fmt.Sprintf("edit-project-modal-%s", project.ID.String()),
			Icon:       icon.SquarePen(),
			Tooltip:    "Edit Project",
			ColorClass: "text-gray-600",
			HoverClass: "hover:text-gray-800 hover:bg-gray-200",
			Condition:  true,
		})
	}
}

templ statusBadge(status services.ProjectStatus) {
	<span
		class={
			"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium status-badge",
			templ.KV("bg-green-200 text-green-800", status == services.ProjectStatusRunning),
			templ.KV("bg-gray-200 text-gray-800", status == services.ProjectStatusStopped),
			templ.KV("bg-red-200 text-red-800", status == services.ProjectStatusError),
			templ.KV("bg-yellow-200 text-yellow-800", status == services.ProjectStatusUnknown),
		}
		data-status={ status.String() }
	>
		{ status.String() }
	</span>
}

templ lastCommitBadge(lastCommit *string) {
	if lastCommit != nil {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-200 text-gray-800 commit-badge" data-commit={ *lastCommit }>
			{ (*lastCommit)[:8] }
		</span>
	} else {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-500 commit-badge" data-commit="">
			No commits
		</span>
	}
}

templ GenericModal(config ModalConfig) {
	@modal.Modal(modal.Props{ID: config.ID, Class: fmt.Sprintf("%s bg-gray-100 shadow-lg", config.Size), DisableESC: true, DisableClickAway: true}) {
		@modal.Header(modal.HeaderProps{Class: "bg-gray-200 rounded-t-lg border-b border-gray-300"}) {
			<div class="flex items-center justify-between">
				<span>{ config.Title }</span>
				@modal.Close() {
					<button class="text-gray-400 hover:text-gray-600 transition-colors p-1">
						@icon.X()
					</button>
				}
			</div>
		}
		@modal.Body(modal.BodyProps{Class: "bg-gray-100"}) {
			@config.Body
		}
		@modal.Footer(modal.FooterProps{Class: "bg-gray-100 rounded-b-lg"}) {
			@config.Footer
		}
	}
}

templ CodeOutput(config CodeOutputConfig) {
	<div id={ fmt.Sprintf("%s-output-container-%s", config.OutputType, config.ProjectID) } class="mt-4">
		if config.OutputType == "logs" {
			<div class="mb-2">
				<span class="text-sm font-medium text-gray-700">Docker Compose Logs:</span>
			</div>
		}
		@code.Code(code.Props{
			ID:        fmt.Sprintf("%s-output-code-%s", config.OutputType, config.ProjectID),
			Language:  "bash",
			Size:      code.SizeFull,
			Class:     "bg-gray-900",
			CodeClass: fmt.Sprintf("text-gray-400 bg-gray-900 text-xs %s overflow-y-auto p-2", config.Height),
		}) {
			<div id={ fmt.Sprintf("%s-output-content-%s", config.OutputType, config.ProjectID) }>
				<span class="oar-text">{ config.InitialText }</span>
			</div>
		}
	</div>
}

templ editProjectModal(project *services.Project) {
	@GenericModal(ModalConfig{
		ID:     fmt.Sprintf("edit-project-modal-%s", project.ID.String()),
		Title:  "Edit Project",
		Size:   "sm:max-w-lg",
		Body:   editProjectForm(project),
		Footer: editProjectFooter(project),
	})
}

templ editProjectForm(project *services.Project) {
	if project.Status == services.ProjectStatusRunning {
		<div class="space-y-4">
			<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						@icon.TriangleAlert(icon.Props{Class: "h-5 w-5 text-yellow-400"})
					</div>
					<div class="ml-3">
						<h3 class="text-sm font-medium text-yellow-800">Project is Running</h3>
						<div class="mt-2 text-sm text-yellow-700">
							<p>This project is currently running and cannot be edited. Stop the project first to make changes.</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	} else {
		@projectform.ProjectForm(projectform.ProjectFormProps{
			Mode:       "edit",
			Project:    project,
			FormID:     fmt.Sprintf("edit-project-form-%s", project.ID.String()),
			FormAction: fmt.Sprintf("/projects/%s/edit", project.ID.String()),
			FormTarget: fmt.Sprintf("#project-card-%s", project.ID.String()),
			FormSwap:   "outerHTML",
			IDPrefix:   fmt.Sprintf("project-%s", project.ID.String()),
		})
	}
}

templ editProjectFooter(project *services.Project) {
	<div class="flex justify-end">
		if project.Status != services.ProjectStatusRunning {
			@button.Button(button.Props{
				Type:       button.TypeSubmit,
				Attributes: templ.Attributes{"form": fmt.Sprintf("edit-project-form-%s", project.ID.String())},
			}) {
				Save Changes
			}
		}
	</div>
}

templ deleteProjectModal(project *services.Project) {
	@GenericModal(ModalConfig{
		ID:     fmt.Sprintf("delete-project-modal-%s", project.ID.String()),
		Title:  "Delete Project",
		Size:   "sm:max-w-md",
		Body:   deleteProjectBody(project),
		Footer: deleteProjectFooter(project),
	})
}

templ deleteProjectBody(project *services.Project) {
	<div class="space-y-4">
		<div class="flex items-center space-x-3">
			<div>
				<p class="text-sm text-gray-500 mt-1">
					This action cannot be undone. This will permanently delete the project
					<strong>{ project.Name }</strong> and remove all associated data.
				</p>
			</div>
		</div>
		<form
			id={ fmt.Sprintf("delete-project-form-%s", project.ID.String()) }
			hx-delete={ fmt.Sprintf("/projects/%s", project.ID.String()) }
			hx-target="#projects-grid"
			hx-swap="innerHTML"
		></form>
	</div>
}

templ deleteProjectFooter(project *services.Project) {
	<div class="flex justify-end">
		@button.Button(button.Props{
			Type:       button.TypeSubmit,
			Variant:    button.VariantDestructive,
			Attributes: templ.Attributes{"form": fmt.Sprintf("delete-project-form-%s", project.ID.String())},
		}) {
			Delete Project
		}
	</div>
}

templ deployProjectModal(project *services.Project) {
	@GenericModal(ModalConfig{
		ID:     fmt.Sprintf("deploy-project-modal-%s", project.ID.String()),
		Title:  "Deploy Project",
		Size:   "sm:max-w-2xl",
		Body:   deployProjectBody(project),
		Footer: deployProjectFooter(project),
	})
}

templ deployProjectBody(project *services.Project) {
	<div class="space-y-4">
		<div class="space-y-3">
			@form.Item() {
				<div class="flex items-center space-x-2">
					@checkbox.Checkbox(checkbox.Props{
						ID:      fmt.Sprintf("pull-changes-%s", project.ID.String()),
						Name:    "pull_changes",
						Checked: true,
					})
					@form.Label(form.LabelProps{For: fmt.Sprintf("pull-changes-%s", project.ID.String())}) {
						Pull latest changes from Git
					}
				</div>
				@form.Description() {
					Update the project with the latest changes before deploying
				}
			}
		</div>
		@CodeOutput(CodeOutputConfig{
			ProjectID:   project.ID.String(),
			OutputType:  "deploy",
			Height:      "h-64",
			InitialText: "Output will show up here when you deploy the project...",
		})
		<form
			id={ fmt.Sprintf("deploy-project-form-%s", project.ID.String()) }
		></form>
	</div>
}

templ deployProjectFooter(project *services.Project) {
	<div class="flex justify-end">
		@button.Button(button.Props{
			Type:       button.TypeButton,
			Variant:    button.VariantDefault,
			Class:      "bg-blue-600 hover:bg-blue-700 text-white",
			ID:         fmt.Sprintf("deploy-button-%s", project.ID.String()),
			Attributes: templ.Attributes{"onclick": fmt.Sprintf("deployProjectWithStreaming('%s')", project.ID.String())},
		}) {
			Deploy Project
		}
	</div>
}

templ stopProjectModal(project *services.Project) {
	@GenericModal(ModalConfig{
		ID:     fmt.Sprintf("stop-project-modal-%s", project.ID.String()),
		Title:  "Stop Project",
		Size:   "sm:max-w-2xl",
		Body:   stopProjectBody(project),
		Footer: stopProjectFooter(project),
	})
}

templ stopProjectBody(project *services.Project) {
	<div class="space-y-4">
		<div>
			<p class="text-sm text-gray-500">
				This will stop the project
				<strong>{ project.Name }</strong> and shut down all running containers.
			</p>
		</div>
		@CodeOutput(CodeOutputConfig{
			ProjectID:   project.ID.String(),
			OutputType:  "stop",
			Height:      "h-64",
			InitialText: "Output will show up here when you stop the project...",
		})
		<form
			id={ fmt.Sprintf("stop-project-form-%s", project.ID.String()) }
		></form>
	</div>
}

templ stopProjectFooter(project *services.Project) {
	<div class="flex justify-end">
		@button.Button(button.Props{
			Type:       button.TypeButton,
			Variant:    button.VariantDestructive,
			ID:         fmt.Sprintf("stop-button-%s", project.ID.String()),
			Attributes: templ.Attributes{"onclick": fmt.Sprintf("stopProjectWithStreaming('%s')", project.ID.String())},
		}) {
			Stop Project
		}
	</div>
}

templ logsModal(project *services.Project) {
	@GenericModal(ModalConfig{
		ID:     fmt.Sprintf("logs-modal-%s", project.ID.String()),
		Title:  fmt.Sprintf("View Logs - %s", project.Name),
		Size:   "sm:max-w-4xl",
		Body:   logsModalBody(project),
		Footer: templ.NopComponent,
	})
}

templ logsModalBody(project *services.Project) {
	<div class="space-y-4">
		<div>
			<p class="text-sm text-gray-500">
				Live logs from project
				<strong>{ project.Name }</strong> containers.
			</p>
		</div>
		@CodeOutput(CodeOutputConfig{
			ProjectID:   project.ID.String(),
			OutputType:  "logs",
			Height:      "h-96",
			InitialText: "Starting log stream...",
		})
	</div>
}

templ configModal(project *services.Project) {
	@GenericModal(ModalConfig{
		ID:     fmt.Sprintf("config-modal-%s", project.ID.String()),
		Title:  fmt.Sprintf("Docker Compose Config - %s", project.Name),
		Size:   "sm:max-w-4xl",
		Body:   configModalBody(project),
		Footer: templ.NopComponent,
	})
}

templ configModalBody(project *services.Project) {
	<div class="space-y-4">
		<div>
			<p class="text-sm text-gray-500">
				Generated Docker Compose configuration for project
				<strong>{ project.Name }</strong> after variable interpolation.
			</p>
		</div>
		<div
			id={ fmt.Sprintf("config-content-%s", project.ID.String()) }
			hx-get={ fmt.Sprintf("/projects/%s/config", project.ID.String()) }
			hx-trigger="intersect once"
			hx-swap="innerHTML"
		>
			@code.Code(code.Props{
				ID:        fmt.Sprintf("config-output-code-%s", project.ID.String()),
				Language:  "yaml",
				Size:      code.SizeFull,
				Class:     "bg-gray-900",
				CodeClass: "text-gray-400 bg-gray-900 text-xs h-96 overflow-y-auto p-2",
			}) {
				<div id={ fmt.Sprintf("config-output-content-%s", project.ID.String()) }>
					<span class="oar-text">Loading configuration...</span>
				</div>
			}
		</div>
	</div>
}

templ ConfigContent(configYaml string) {
	@code.Code(code.Props{
		Language:  "yaml",
		Size:      code.SizeFull,
		Class:     "bg-gray-900",
		CodeClass: "text-gray-400 bg-gray-900 text-xs h-96 overflow-y-auto p-2",
	}) {
		<div>
			<pre class="whitespace-pre-wrap">{ configYaml }</pre>
		</div>
	}
}


// Generic toast component
templ GenericToast(config ToastConfig) {
	<div hx-swap-oob="afterbegin:#toast-container">
		@toast.Toast(toast.Props{
			Title:         config.Title,
			Description:   config.Description,
			Variant:       config.Variant,
			Position:      toast.PositionBottomRight,
			Duration:      5000,
			Dismissible:   true,
			ShowIndicator: true,
			Icon:          true,
		})
	</div>
}

// Simplified toast helpers
templ SuccessToast(title, description string) {
	@GenericToast(ToastConfig{
		Title:       title,
		Description: description,
		Variant:     toast.VariantSuccess,
	})
}

templ ErrorToast(title, description string) {
	@GenericToast(ToastConfig{
		Title:       title,
		Description: description,
		Variant:     toast.VariantError,
	})
}

// Simplified wrapper components
templ ProjectCardWithToast(project *services.Project, toastType, title, description string) {
	@ProjectCard(project)
	if toastType == "success" {
		@SuccessToast(title, description)
	} else {
		@ErrorToast(title, description)
	}
}

templ ProjectsGridWithToast(projects []*services.Project, toastType, title, description string) {
	@ProjectsGrid(projects)
	if toastType == "success" {
		@SuccessToast(title, description)
	} else {
		@ErrorToast(title, description)
	}
}

// Backward compatibility wrappers
templ ProjectCardWithSuccessToast(project *services.Project, title, description string) {
	@ProjectCardWithToast(project, "success", title, description)
}

templ ProjectCardWithErrorToast(project *services.Project, title, description string) {
	@ProjectCardWithToast(project, "error", title, description)
}

templ ProjectsGridWithSuccessToast(projects []*services.Project, title, description string) {
	@ProjectsGridWithToast(projects, "success", title, description)
}

templ ProjectsGridWithErrorToast(projects []*services.Project, title, description string) {
	@ProjectsGridWithToast(projects, "error", title, description)
}
